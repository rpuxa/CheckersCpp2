#include "types.h"

using namespace types;

const _ui bitPositions[] = {
        0, 1, 48, 2, 57, 49, 28, 3,
        61, 58, 50, 42, 38, 29, 17, 4,
        62, 55, 59, 36, 53, 51, 43, 22,
        45, 39, 33, 30, 24, 18, 12, 5,
        63, 47, 56, 27, 60, 41, 37, 16,
        54, 35, 52, 21, 44, 32, 23, 11,
        46, 26, 40, 15, 34, 20, 31, 10,
        25, 14, 19, 9, 13, 8, 7, 6
};

const _board reversed[] = {
        0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40,
        168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20,
        148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60,
        188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10,
        138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38,
        166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30,
        158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49,
        177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5,
        133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45,
        173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19,
        147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59,
        187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15,
        143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255,
};

_board reverse(_board board) {
    return (reversed[board & 0xFF] << 24) | (reversed[(board & 0xFF00) >> 8] << 16) |
           (reversed[(board & 0xFF0000) >> 16] << 8) | reversed[(board & 0xFF000000) >> 24];
}

_ui getBit(_ci number, _ci position) {
    return (number >> position) & 1;
}

_ui setBit(_ci number, _ci position) {
    return number | (1 << position);
}

void setBitAssign(_ui &number, _ui position) {
    number |= 1 << position;
}

_ui getLowestBit(_ci number) {
    return bitPositions[((number & -number) * 0x03F79D71B4CB0A89ULL) >> 58];
}

_ui powerLowestBit(_ci number) {
    return number & (-number);
}

_ui zeroLowestBit(_ci number) {
    return number & (number - 1);
}

void zeroLowestBitAssign(_ui &number) {
    number &= number - 1;
}

_ui bitCount(_ui number) {
    number -= (number >> 1) & 1431655765;
    number = (number & 858993459) + ((number >> 2) & 858993459);
    number = number + (number >> 4) & 252645135;
    number += number >> 8;
    number += number >> 16;
    return number & 63;
}